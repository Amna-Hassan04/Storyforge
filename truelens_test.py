# -*- coding: utf-8 -*-
"""quickstart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/truera/trulens/blob/main/trulens_eval/examples/quickstart/quickstart.ipynb

# ðŸ““ TruLens Quickstart

In this quickstart you will create a RAG from scratch and learn how to log it and get feedback on an LLM response.

For evaluation, we will leverage the "hallucination triad" of groundedness, context relevance and answer relevance.

[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/truera/trulens/blob/main/trulens_eval/examples/quickstart/quickstart.ipynb)
"""


import os
os.environ["OPENAI_API_KEY"] = ""

"""## Get Data

In this case, we'll just initialize some simple text in the notebook.
"""

university_info = """
In this game, players take on the role of Duvak, a dwarf who has been exiled from his ancestral homeland deep below the peaks. Through experimentation with bizarre flora and fungi, Duvak will learn to craft unusual potions with perplexing alchemical effects. He will use magical wooden materials to construct living dwellings that seamlessly integrate into the rocky underground environments through shaping abilities tied to the world's ecosystems. Duvak's goal is to reunite the scattered dwarf clans and reclaim sovereignty over their rich mountain demesne. However, to prove himself a wise and just leader, he must call upon cunning and intuition rather than martial prowess. Duvak will explore mysterious caverns, solving environmental puzzles that unlock ancient dwarven secrets. He will also encounter and assist the diverse native tribes that call the underground home, each with their own peculiar customs. By developing cooperative relationships, surprising solutions to communal needs, and demonstrations of scholarly acumen, Duvak can earn the trust and backing necessary to bring his people together in harmony once more under the earthen halls of their rightful kingdom. Players are invited to immerse themselves in the rich cultural lore of the dwarves and shape the reclamation of their heritage through inventive experimentation rather than typical RPG combat or conquest mechanics.
"""

"""## Create Vector Store

Create a chromadb vector store in memory.
"""

from openai import OpenAI
oai_client = OpenAI()

oai_client.embeddings.create(
        model="text-embedding-ada-002",
        input=university_info
    )

import chromadb
from chromadb.utils.embedding_functions import OpenAIEmbeddingFunction

embedding_function = OpenAIEmbeddingFunction(api_key=os.environ.get('OPENAI_API_KEY'),
                                             model_name="text-embedding-ada-002")


chroma_client = chromadb.Client()
vector_store = chroma_client.get_or_create_collection(name="Universities",
                                                      embedding_function=embedding_function)

"""Add the university_info to the embedding database."""

vector_store.add("uni_info", documents=university_info)

"""## Build RAG from scratch

Build a custom RAG from scratch, and add TruLens custom instrumentation.
"""

from trulens_eval import Tru
from trulens_eval.tru_custom_app import instrument
tru = Tru()

class RAG_from_scratch:
    @instrument
    def retrieve(self, query: str) -> list:
        """
        Retrieve relevant text from vector store.
        """
        results = vector_store.query(
        query_texts=query,
        n_results=2
    )
        return results['documents'][0]

    @instrument
    def generate_completion(self, query: str, context_str: list) -> str:
        """
        Generate answer from context.
        """
        completion = oai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        temperature=0,
        messages=
        [
            {"role": "user",
            "content":
            f"We have provided context information below. \n"
            f"---------------------\n"
            f"{context_str}"
            f"\n---------------------\n"
            f"Given this information, please answer the question: {query}"
            }
        ]
        ).choices[0].message.content
        return completion

    @instrument
    def query(self, query: str) -> str:
        context_str = self.retrieve(query)
        completion = self.generate_completion(query, context_str)
        return completion

rag = RAG_from_scratch()

"""## Set up feedback functions.

Here we'll use groundedness, answer relevance and context relevance to detect hallucination.
"""

from trulens_eval import Feedback, Select
from trulens_eval.feedback import Groundedness
from trulens_eval.feedback.provider.openai import OpenAI as fOpenAI

import numpy as np

# Initialize provider class
fopenai = fOpenAI()

grounded = Groundedness(groundedness_provider=fopenai)

# Define a groundedness feedback function
f_groundedness = (
    Feedback(grounded.groundedness_measure_with_cot_reasons, name = "Groundedness")
    .on(Select.RecordCalls.retrieve.rets.collect())
    .on_output()
    .aggregate(grounded.grounded_statements_aggregator)
)

# Question/answer relevance between overall question and answer.
f_qa_relevance = (
    Feedback(fopenai.relevance_with_cot_reasons, name = "Answer Relevance")
    .on(Select.RecordCalls.retrieve.args.query)
    .on_output()
)

# Question/statement relevance between question and each context chunk.
f_context_relevance = (
    Feedback(fopenai.qs_relevance_with_cot_reasons, name = "Context Relevance")
    .on(Select.RecordCalls.retrieve.args.query)
    .on(Select.RecordCalls.retrieve.rets.collect())
    .aggregate(np.mean)
)

"""## Construct the app
Wrap the custom RAG with TruCustomApp, add list of feedbacks for eval
"""

from trulens_eval import TruCustomApp
tru_rag = TruCustomApp(rag,
    app_id = 'RAG v1',
    feedbacks = [f_groundedness, f_qa_relevance, f_context_relevance])

"""## Run the app
Use `tru_rag` as a context manager for the custom RAG-from-scratch app.
"""

with tru_rag as recording:
    rag.query("Write a short story about a exiled prince called duvak that has to convince his people by solving problems and disputes among them while an evil dwarf tried his best to take his throne.")

tru.get_leaderboard(app_ids=["RAG v1"])

tru.run_dashboard()